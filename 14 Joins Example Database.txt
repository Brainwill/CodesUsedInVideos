Create database TESTjoins

-- Create Departments table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);

-- Create Employees table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FullName VARCHAR(100),
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

-- Create Projects table
CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    ProjectName VARCHAR(100),
    EmployeeID INT,
    DepartmentID INT,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);


-- Insert departments
INSERT INTO Departments VALUES (1, 'HR');
INSERT INTO Departments VALUES (2, 'IT');
INSERT INTO Departments VALUES (3, 'Finance');

-- Insert employees
INSERT INTO Employees VALUES (101, 'Alice Johnson', 1);
INSERT INTO Employees VALUES (102, 'Bob Smith', 2);
INSERT INTO Employees VALUES (103, 'Charlie Davis', 2);
INSERT INTO Employees VALUES (104, 'Diana Evans', 3);

-- Insert projects
INSERT INTO Projects VALUES (201, 'Employee Onboarding', 101, 1);
INSERT INTO Projects VALUES (202, 'Website Redesign', 102, 2);
INSERT INTO Projects VALUES (203, 'Data Migration', 103, 2);
INSERT INTO Projects VALUES (204, 'Budget Analysis', 104, 3);



-- Alter Employees table to add ManagerID
ALTER TABLE Employees
ADD ManagerID INT;

-- Update with manager relationships
UPDATE Employees SET ManagerID = NULL WHERE EmployeeID = 101; -- Alice has no manager
UPDATE Employees SET ManagerID = 101 WHERE EmployeeID = 102; -- Bob reports to Alice
UPDATE Employees SET ManagerID = 101 WHERE EmployeeID = 103; -- Charlie reports to Alice
UPDATE Employees SET ManagerID = 104 WHERE EmployeeID = 104; -- Diana manages herself (just for example)

